C51 COMPILER V9.54   IR                                                                    06/29/2023 16:28:25 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE IR
OBJECT MODULE PLACED IN .\Objects\IR.obj
COMPILER INVOKED BY: D:\keil5\C51\BIN\C51.EXE IR.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\IR.lst) 
                    -TABS(2) OBJECT(.\Objects\IR.obj)

line level    source

   1          #include <REGX52.H>
   2          #include "Int0.h"
   3          #include "Timer0.h"
   4          
   5          
   6          unsigned char IR_State;
   7          unsigned int IR_Time;
   8          
   9          unsigned char IR_Data[4];
  10          unsigned char IR_PData;
  11          
  12          unsigned char IR_DataFlag;
  13          unsigned char IR_RepeatFlag;
  14          unsigned char IR_Address;
  15          unsigned char IR_Command;
  16          
  17          void IR_Init()
  18          {
  19   1        Timer0_Init();
  20   1        Int0_Init();
  21   1      }
  22          
  23          
  24          unsigned char IR_GetDataFlag()
  25          {
  26   1        if(IR_DataFlag)
  27   1        {
  28   2          IR_DataFlag=0;
  29   2          return 1;
  30   2        }
  31   1        return 0;
  32   1      }
  33          
  34          
  35          unsigned char IR_GetRepeatFlag()
  36          {
  37   1          if(IR_RepeatFlag)
  38   1        {
  39   2          IR_RepeatFlag=0;
  40   2          return 1;
  41   2        }
  42   1        return 0; 
  43   1      }
  44          
  45          
  46          unsigned char IR_GetAddress()
  47          {
  48   1        return IR_Address;
  49   1        
  50   1      }
  51          
  52          
  53          unsigned char IR_GetCommand()
  54          {
C51 COMPILER V9.54   IR                                                                    06/29/2023 16:28:25 PAGE 2   

  55   1        return IR_Command;
  56   1      }
  57          
  58          
  59          void Int0_Routine(void) interrupt 0
  60          {
  61   1        if(IR_State==0)
  62   1        {
  63   2          Timer0_SetCounter(0);
  64   2          Timer0_Run(1);
  65   2          IR_State=1;
  66   2        }
  67   1        else if(IR_State==1)
  68   1        {
  69   2          IR_Time=Timer0_GetCounter();
  70   2          Timer0_SetCounter(0);
  71   2          if(IR_Time>12442-500 && IR_Time<12442+500)
  72   2          {
  73   3            IR_State=2;
  74   3          }
  75   2          else if(IR_Time>10368-500 && IR_Time<10368+500)
  76   2          {
  77   3            IR_RepeatFlag=1;
  78   3            Timer0_Run(0);
  79   3            IR_State=0;
  80   3          }
  81   2          else
  82   2          {
  83   3            IR_State=1;
  84   3          }
  85   2        }
  86   1        else if(IR_State==2)
  87   1        {
  88   2          IR_Time=Timer0_GetCounter();
  89   2          Timer0_SetCounter(0);
  90   2          if(IR_Time>1032-500 && IR_Time<1032+500)
  91   2          {
  92   3            IR_Data[IR_PData/8]&=~(0x01<<(IR_PData%8));
  93   3            IR_PData++;
  94   3          }
  95   2          else if(IR_Time>2074-500 && IR_Time<2074+500)
  96   2          {
  97   3            IR_Data[IR_PData/8]|=(0x01<<(IR_PData%8));
  98   3            IR_PData++;
  99   3          }
 100   2          else
 101   2          {
 102   3            IR_PData=0;
 103   3            IR_State=1; 
 104   3          }
 105   2          if(IR_PData>=32)
 106   2          {
 107   3            IR_PData=0;
 108   3            if((IR_Data[0]==~IR_Data[1])&&(IR_Data[2]==~IR_Data[3]))
 109   3            {
 110   4              IR_Address=IR_Data[0];
 111   4              IR_Command=IR_Data[2];
 112   4              IR_DataFlag=1;
 113   4            }
 114   3            Timer0_Run(0);
 115   3            IR_State=0;
 116   3          }
C51 COMPILER V9.54   IR                                                                    06/29/2023 16:28:25 PAGE 3   

 117   2          
 118   2        } 
 119   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    370    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     12    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
